#!/usr/bin/env python

# ref: https://blog.josejg.com/debugging-pretty/
# source: https://gist.github.com/JJGO/e64c0e8aedb5d464b5f79d3b12197338

import sys
import shutil
from typing import Optional, List, Tuple, Dict

import typer
from rich import print
from rich.columns import Columns
from rich.console import Console
from rich.traceback import install

# fmt: off
# Mapping from topics to colors
TOPICS = {
    "TIMR": "#9a9a99",
    "VOTE": "#67a0b2",
    "LEAD": "#d0b343",
    "TERM": "#70c43f",
    "LOG1": "#4878bc",
    "LOG2": "#398280",
    "CMIT": "#98719f",
    "PERS": "#d08341",
    "SNAP": "#fd971f",
    "DROP": "#ff615c",
    "CLNT": "#00813c",
    "TEST": "#fe2c79",
    "INFO": "#ffffff",
    "WARN": "#d08341",
    "ERRO": "#fe2626",
    "TRCE": "#aacc00",
    "CONF": "#ffe411",
    "HART": "#810672",
    "SRVR": "#ff7dfa",
    "SCTR": "#cc9900",
    "MIGR": "#5689ff",
}
# fmt: on

NO_COLUMN_TOPICS = set(['TEST','CONF'])

HIGHLIGHT = '#00ff00'

def list_topics(value: Optional[str]):
    if value is None:
        return value
    topics = value.split(",")
    for topic in topics:
        if topic not in TOPICS:
            raise typer.BadParameter(f"topic {topic} not recognized")
    return topics


def main(
    file: typer.FileText = typer.Argument(None, help="File to read, stdin otherwise"),
    colorize: bool = typer.Option(True, "--no-color"),
    n_columns: Optional[int] = typer.Option(None, "--columns", "-c"),
    ignore: Optional[str] = typer.Option(None, "--ignore", "-i", callback=list_topics),
    just: Optional[str] = typer.Option(None, "--just", "-j", callback=list_topics),
    show_time: bool = typer.Option(False, "--time", help="Show log time in milliseconds"),
    start_from: Optional[int] = typer.Option(None, "--start", help="Filter logs after timestamp, in millisecond"),
    duration: Optional[int] = typer.Option(None, "--duration", help="Cooperate with --start, filter logs in duration, in millisecond"),
    expr: Optional[str] = typer.Option(None, "--expr", help="Expression highlight"),
    server_ids: Optional[str] = typer.Option(None, "--server", help="Filter of server ids"),
):
    topics = list(TOPICS)

    # We can take input from a stdin (pipes) or from a file
    input_ = file if file else sys.stdin
    # Print just some topics or exclude some topics (good for avoiding verbose ones)
    if just:
        topics = just
    if ignore:
        topics = [lvl for lvl in topics if lvl not in set(ignore)]

    topics = set(topics)
    console = Console()
    width = console.size.width

    if server_ids is not None:
        server_ids_set = set(int(i) for i in server_ids.split(','))

    panic = False
    for line in input_:
        if not line.strip():
            continue

        time, *msg = line.strip().split(" ")

        if not time.isnumeric():
            # Code from tests or panics does not follow format
            # so we print it as is
            if line.startswith("panic"):
                panic = True

            if panic:
                print(line, end="")
                continue
            else:
                time, topic, msg = '*'*6, 'TEST', [time]+msg
        else:
            topic, msg = msg[0], msg[1:]

        if topic == 'CONF' and len(msg) >= 2 and msg[1] == 'servers':
            n_servers = int(msg[0])
            if msg[-1] == 'ctrlerservers':
                n_groups = int(msg[4])
                n_ctrlers = int(msg[7])
                n_columns = n_servers * n_groups + n_ctrlers
            else:
                n_columns = n_servers

        # To ignore some topics
        if topic not in topics:
            continue

        # Start from timestamp
        if time.isnumeric() and start_from is not None:
            if int(time) / 10 < start_from:
                continue
            if duration is not None and int(time) / 10 > (start_from+duration):
                continue

        # Debug calls from the test suite aren't associated with
        # any particular peer. Otherwise we can treat second column
        # as peer id
        if topic not in NO_COLUMN_TOPICS:
            if msg[0][0] == 'S':
                i = int(msg[0][1:])
            elif msg[0][0] == 'G' and msg[1][0] == 'S':
                gid = int(msg[0][1:])
                server_id = int(msg[1][1:])
                if gid == 0:
                    i = server_id
                else:
                    if n_groups > 0:
                        gid %= n_groups
                    i = gid * n_servers + server_id + n_ctrlers
            else:
                i = 0
                msg = 'Invalid Format: ' + msg
                topic = 'ERRO'

            if server_ids is not None and i not in server_ids_set:
                continue

        msg = " ".join(msg)

        if expr is not None:
            msg = msg.replace(expr, f"[{HIGHLIGHT}]{expr}[/{HIGHLIGHT}]")

        # Colorize output by using rich syntax when needed
        if colorize and topic in TOPICS:
            color = TOPICS[topic]
            timeStr = f"({(int(time)%1e4)/10}ms)" if show_time and not time.startswith('*') else ''
            msg = f"[{color}]{timeStr}{msg}[/{color}]"

        # Single column printing. Always the case for debug stmts in tests
        if n_columns is None or topic in NO_COLUMN_TOPICS:
            print(time, topic, msg)
        # Multi column printing, timing is dropped to maximize horizontal
        # space. Heavylifting is done through rich.column.Columns object
        else:
            cols = ["" for _ in range(n_columns)]
            msg = "" + msg
            cols[i] = msg
            col_width = int(width / n_columns)
            cols = Columns(cols, width=col_width - 1, equal=True, expand=True)
            print(cols)


if __name__ == "__main__":
    typer.run(main)
